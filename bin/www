#!/usr/bin/env node

/**
 * Configure Environment
 */
require('dotenv').config();

/**
 * Module dependencies.
 */

const app = require('../app');
const log = require('debug')('hostlab:server');
const http = require('http');

/**
 * Since App gets registered by RedBird, just set Settings and store in Express.
 */

const port = normalizePort(3000);
app.set('port', port);

const hostname = process.env.HOSTNAME || process.env.REMOTE_IP;
app.set('hostname', hostname);

const proxy = require('../common/connections').proxy;
proxy.register(hostname, `localhost:${ port }`);

function mongoResolver(host, url, req) {
  if (/^\/mongo/.test(url)) {
    require('../common/docker').
        docker.
        getContainer(req.user.containers.mongoExpress.id).
        inspect((err, data) => {
          if (err) {
            return err;
          }
          const mongoExpressContainerIP = data.NetworkSettings.Networks.hostlab_users.IPAddress;
          log(mongoExpressContainerIP);
          return `${mongoExpressContainerIP}:8081`;
        });
  }
}
mongoResolver.priority = 100;
proxy.addResolver(mongoResolver);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Because the application will not be exposed as is,
 * just listen on provided port and only on localhost.
 */

server.listen(port, 'localhost');
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  log('Listening on ' + bind);
}
