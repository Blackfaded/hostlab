extends ../layouts/main
include modals/createBlueprint
include modals/createApplication

block config
    - var headerTitle = "Node.js Applications"


block content
    h2.page-header
        span(style="margin-right: 10px;")= ` Blueprints (${blueprints.length})`
        .btn.btn-flat.btn-primary.newBlueprint(data-toggle="modal" data-target="#newBlueprintModal") New Blueprint
    .row
        each blueprint in blueprints
            .col-md-12
                .col-sm-6.col-lg-4
                    .box.box-solid.blueprint(id=blueprint._id)
                        .box-header.with-border
                            h3.box-title= blueprint.name
                            .pull-right.box-tools
                                a.btn.btn-box-tool.destroy(href="#" data-id=blueprint._id)
                                    i.fas.fa-trash
                        .box-body
                            p= "Base Repository: " + blueprint.containingRepoName
                            p= "Branch: " + blueprint.containingRepoBranch
                            hr
                            button.btn.btn-block.btn-flat.btn-success.newApp(data-toggle="modal" data-target="#newAppModal" data-id=blueprint._id data-name=blueprint.name) New Application


    h2.page-header
        span(style="margin-right: 10px;")= ` Applications (${applications.length})`
    .row
        each application in applications
            .col-md-12
                .col-sm-6.col-lg-4
                    .box.box-solid.application(id=application._id)
                        .box-header.with-border
                            h3.box-title= application.name
                            .pull-right.box-tools
                                a.btn.btn-box-tool(href=application.proxyLink, target="_blank")
                                    i.fas.fa-link.link(data-id=application._id)
                                a.btn.btn-box-tool(href="/node/" + slugify(application.name))
                                    i.fas.fa-wrench.edit
                        .box-body
                            p= "Base Blueprint: "+ application.blueprint.name
                            hr
                            input.onOffToggle(type="checkbox" checked data-id=application._id)


    +createBlueprintModal()
    +createApplicationModal()

block append scripts
    script.
        $(document).ready(function(){
            const toggleOpts = {
                on: 'Running',
                onstyle: 'success',
                off: 'Stopped',
                offstyle: 'danger',
                width: '128px',
                style: 'btn-flat'
            };

            $('.onOffToggle').bootstrapToggle(toggleOpts).on('change', function(e) {
                e.preventDefault();
                let context = $(this);
                context.bootstrapToggle('disable');

                let checked = context.prop('checked');
                let toggle = context.closest('.toggle');

                if(checked) {
                    toggle.toggleClass('btn-success btn-warning').find('.toggle-on').text("Starting...").toggleClass('btn-success btn-warning');
                } else {
                    toggle.toggleClass('btn-danger btn-warning').find('.toggle-off').text("Stopping...").toggleClass('btn-danger btn-warning');
                }

                $.ajax({
                    url: '/api/v1/application/' + context.data('id') + "/" + (checked?"start":"stop"),
                    method: 'POST',
                    success: function(res) {
                        if(checked) {
                            toggle.toggleClass('btn-success btn-warning').find('.toggle-on').text("Running").toggleClass('btn-success btn-warning');
                        } else {
                            toggle.toggleClass('btn-danger btn-warning').find('.toggle-off').text("Stopped").toggleClass('btn-danger btn-warning');
                        }

                        context.bootstrapToggle('enable');
                    },
                    error: function(xhr) {
                        $('#alerts').empty().append(`<div class="alert alert-danger">Toggle failed: ${xhr.responseJSON.message}`);
                    }
                });
            });

            $('.blueprint .destroy').on('click', function(e) {
                e.preventDefault();
                if(confirm("Are you sure you want to delete this blueprint?")) {
                    $.ajax({
                        url: '/api/v1/blueprint/' + $(this).data('id'),
                        method: 'DELETE',
                        success: function(res) {
                            location.reload();
                        },
                        error: function(err) {
                            // TODO Error Handling
                        }
                    });
                }
            });
        })